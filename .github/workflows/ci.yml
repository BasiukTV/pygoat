name: CI-Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  sast-scan:
    runs-on: ubuntu-latest
    environment: common
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=basiuktv
            -Dsonar.projectKey=BasiukTV_pygoat

      - name: Add SonarQube Quality Gate Badge
        run: |
          echo "## SonarQube Scan" >> $GITHUB_STEP_SUMMARY
          echo "[![Quality gate](https://sonarcloud.io/api/project_badges/quality_gate?project=BasiukTV_pygoat)](https://sonarcloud.io/summary/new_code?id=BasiukTV_pygoat)" >> $GITHUB_STEP_SUMMARY

  docker-build:
    runs-on: ubuntu-latest
    environment: common
    env:
      # Currently uses Docker Hub, so no registry info is needed
      # DOCKER_REGISTRY: YOUR_REGISTY
    
      DOCKER_USER: ${{ vars.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.11'

#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
            
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        uses: docker/login-action@v3.4.0
        with:

          # Currently uses Docker Hub, so no registry info is needed
          # registry: YOUR_REGISTY

          # Username used to log in to the Docker registry
          username: ${{ env.DOCKER_USER }}
          # Password or personal access token used to log in to the Docker registry
          password: ${{ env.DOCKER_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_id }}

      - name: Scan image with Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          image: ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_id }}
          only-severities: critical,high
          sarif-file: docker-scout-sarif.output.json
          summary: true

          # Below being set to true will fail the run if vulnerabilities are found
          # But as this project is focused on finding the vulnerabilities, not fixing them, we set it to false
          exit-code: false

      - name: Upload Docker Scout SARIF result
        if: ${{ always() }} # Run this even if Docker Scout scanning resulted in failure
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: docker-scout-sarif.output.json

  terraform-scan:
    runs-on: ubuntu-latest
    environment: common
    env:
      TF_HOME: ${{ github.workspace }}/automation/iac/app_service/terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          # The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # This needs TF_API_TOKEN secret passed in hashicorp/setup-terraform@v2 step
      - name: Terraform Format & Validate Check
        run: |
          cd $TF_HOME
          terraform init
          terraform fmt -check
          terraform validate
          cd -

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-ref: ${{ env.TF_HOME }}
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() # Should run even if the previous step fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'      

      - name: Upload Terraform Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: terraform
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{ env.TF_HOME }}
          if-no-files-found: error      
          retention-days: 90
          overwrite: false      
          include-hidden-files: true # just a safeguard for passing .terraform into artifacts
                
